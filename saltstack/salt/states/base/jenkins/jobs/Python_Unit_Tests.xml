<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Unit test job triggred by webhooks.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <com.synopsys.arc.jenkinsci.plugins.jobrestrictions.jobs.JobRestrictionProperty plugin="job-restrictions@0.6"/>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://git@bitbucket.cambiumnetworks.com:7999/cnssng/cnssng.git</url>
        <credentialsId>5fbdc694-e002-4a4c-b41e-04eed7dcc9c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/release*</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <assignedNode>pytest</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <org.jenkinsci.plugins.gwt.GenericTrigger plugin="generic-webhook-trigger@1.28">
      <spec></spec>
      <genericVariables>
        <org.jenkinsci.plugins.gwt.GenericVariable>
          <expressionType>JSONPath</expressionType>
          <key>FROM_BRANCH</key>
          <value>$.pullRequest.fromRef.displayId</value>
          <regexpFilter></regexpFilter>
          <defaultValue>release/cnMaestro_release_2.3.0</defaultValue>
        </org.jenkinsci.plugins.gwt.GenericVariable>
        <org.jenkinsci.plugins.gwt.GenericVariable>
          <expressionType>JSONPath</expressionType>
          <key>TO_BRANCH</key>
          <value>$.pullRequest.toRef.displayId</value>
          <regexpFilter></regexpFilter>
          <defaultValue>release/cnMaestro_release_2.3.0</defaultValue>
        </org.jenkinsci.plugins.gwt.GenericVariable>
        <org.jenkinsci.plugins.gwt.GenericVariable>
          <expressionType>JSONPath</expressionType>
          <key>PR_ID</key>
          <value>$.pullRequest.id</value>
          <regexpFilter></regexpFilter>
          <defaultValue></defaultValue>
        </org.jenkinsci.plugins.gwt.GenericVariable>
        <org.jenkinsci.plugins.gwt.GenericVariable>
          <expressionType>JSONPath</expressionType>
          <key>RAISED_BY</key>
          <value>$.pullRequest.author.user.displayName</value>
          <regexpFilter></regexpFilter>
          <defaultValue></defaultValue>
        </org.jenkinsci.plugins.gwt.GenericVariable>
        <org.jenkinsci.plugins.gwt.GenericVariable>
          <expressionType>JSONPath</expressionType>
          <key>PR_STATE</key>
          <value>$.pullRequest.state</value>
          <regexpFilter></regexpFilter>
          <defaultValue></defaultValue>
        </org.jenkinsci.plugins.gwt.GenericVariable>
      </genericVariables>
      <regexpFilterText></regexpFilterText>
      <regexpFilterExpression></regexpFilterExpression>
      <printPostContent>true</printPostContent>
      <printContributedVariables>true</printContributedVariables>
    </org.jenkinsci.plugins.gwt.GenericTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
if [[ -f .git/gc.log ]]; then
    rm -rf .git/gc.log
fi
git clean -fd -x
git reset --hard
if [[ $PR_STATE != &quot;OPEN&quot; ]]; then
        exit 0
fi
rm -f ${WORKSPACE}/output.xml
rm -f coverage.xml
git checkout $TO_BRANCH
git pull
git merge origin/$FROM_BRANCH
if [[ $? != 0 ]]; then
    exit
fi
sudo pip install -r pip-requirement.txt
cd package
if [[ -f test/.coveragerc ]];then
        pytest --cov-config=test/.coveragerc --cov-report=xml:coverage.xml --cov=scripts  --junitxml=output.xml test
fi</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.descriptionsetter.DescriptionSetterPublisher plugin="description-setter@1.10">
      <regexp>.*FROM_BRANCH = (.*)(\n|.)*?TO_BRANCH = (.*)</regexp>
      <regexpForFailed></regexpForFailed>
      <description>FROM: \1 TO:\2</description>
      <setForMatrix>false</setForMatrix>
    </hudson.plugins.descriptionsetter.DescriptionSetterPublisher>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.3">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>cnmaestro-development</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>false</notifyFailure>
      <notifyBackToNormal>false</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>true</includeCustomMessage>
      <customMessage>Hi Folks,&#xd;
&#xd;
Pr id $PR_ID raised from branch $FROM_BRANCH to $TO_BRANCH, raised by $RAISED_BY has failed pytest.&#xd;
&#xd;
Yours Truly,&#xd;
Jenkins</customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.19">
      <strategy class="hudson.plugins.build_timeout.impl.AbsoluteTimeOutStrategy">
        <timeoutMinutes>30</timeoutMinutes>
      </strategy>
      <operationList/>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.8">
      <template>#PR${PR_ID}_${RAISED_BY}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>